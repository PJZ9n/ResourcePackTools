<?php

/**
 * Copyright (c) 2020 PJZ9n.
 *
 * This file is part of ResourcePackTools.
 *
 * ResourcePackTools is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ResourcePackTools is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ResourcePackTools. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace pjz9n\resourcepacktools;

use pocketmine\plugin\Plugin;
use pocketmine\utils\UUID;
use ZipArchive;

class FileResourcePack extends DynamicResourcePack
{
    /** @var Plugin */
    private $plugin;

    /** @var ResourcePackVersion */
    private $version;

    /** @var string */
    private $uniquePathName;

    /** @var string[] */
    private $files = [];

    /** @var string|null */
    private $iconPath = null;

    /**
     * @param string $zipPath
     * @param Plugin $plugin
     * @param ResourcePackVersion $version
     * @param string|null $uniquePathName Unique name used in the internal path of the resource pack. By default, it uses PluginName.
     */
    public function __construct(string $zipPath, Plugin $plugin, ResourcePackVersion $version, ?string $uniquePathName = null)
    {
        parent::__construct($zipPath);
        $this->plugin = $plugin;
        $this->version = $version;
        $this->uniquePathName = $uniquePathName ?? $plugin->getName();
    }

    /**
     * Add the file.
     *
     * @param string $filePath relative path of plugin resource
     * @param string|null $internalPath Path used inside the resource pack. By default, it uses $filePath.
     */
    public function addFile(string $filePath, ?string $internalPath = null): void
    {
        $this->files[$internalPath ?? $filePath] = $filePath;
    }

    /**
     * Set the ResourcePack icon.
     *
     * @param string|null $filePath relative path of plugin resource
     */
    public function setIcon(?string $filePath): void
    {
        $this->iconPath = $filePath;
    }

    public function registerResourcePack(): void
    {
        try {
            $this->plugin->getLogger()->debug("Create a resource pack...");
            $zip = new ZipArchive();
            $zip->open($this->getZipPath(), ZipArchive::CREATE | ZipArchive::OVERWRITE);
            //generate and add manifest.json
            //TODO: Investigation the specification of manifest in detail.
            $zip->addFromString("manifest.json", json_encode([
                "format_version" => 1,
                "header" => [
                    "description" => "ResourcePack | Auto Generated by ResourcePackTools.",
                    "name" => "ResourcePack For " . $this->plugin->getName() . " Plugin.",
                    "uuid" => UUID::fromData($this->plugin->getName(), "header")->toString(),
                    "version" => $this->version->toFormatArray(),
                ],
                "modules" => [
                    [
                        "description" => "ResourcePack | Auto Generated by ResourcePackTools.",
                        "type" => "resources",
                        "uuid" => UUID::fromData($this->plugin->getName(), "modules")->toString(),
                        "version" => $this->version->toFormatArray(),
                    ],
                ],
            ], JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            $this->plugin->getLogger()->debug("Added manifest.json");
            //add icon
            if ($this->iconPath !== null) {
                $zip->addFromString("pack_icon.png", stream_get_contents($this->plugin->getResource($this->iconPath)));
                $this->plugin->getLogger()->debug("Added pack_icon.png");
            }
            //add files
            $this->plugin->getLogger()->debug("Add files...");
            $fileBasePath = $this->uniquePathName . "/";
            foreach ($this->files as $internalPath => $filePath) {
                $path = strtolower($fileBasePath . $internalPath);
                $zip->addFromString($path, stream_get_contents($this->plugin->getResource($filePath)));
                $this->plugin->getLogger()->debug("Added " . $filePath . ", InternalPath: " . $path);
            }
        } finally {
            $zip->close();
            $this->plugin->getLogger()->debug("The resource pack has been created!");
        }
        parent::registerResourcePack();
    }
}
